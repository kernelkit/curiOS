name: Builder and Pusher Robot

on:
  workflow_call:
    inputs:
      app:
        description: Application, used for app_defconfig and ghcr/app:VER
        required: true
        type: string
      ver:
        description: Version, used for tagging apps, e.g., ghcr/app:VER
        required: true
        type: string
    secrets:
      token:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    strategy:
      matrix:
        platform: [amd64, arm64]
    steps:
      - name: Debug
        run: |
          echo "Input app: ${{ inputs.app }}"
          echo "Input ver: ${{ inputs.ver }}"
      - uses: actions/checkout@v4
      - name: Build Variables
        id: vars
        run: |
          echo "dir=${{ inputs.app }}-${{ matrix.platform }}"        >> $GITHUB_OUTPUT
          echo "tgz=${{ inputs.app }}-${{ matrix.platform }}.tar.gz" >> $GITHUB_OUTPUT
      - name: Restore Cache of dl/
        uses: actions/cache@v4
        with:
          path: dl/
          key: dl-${{ matrix.platform }}-${{ hashFiles('.git/modules/buildroot/HEAD', 'configs/*', 'package/*/*.hash') }}
          restore-keys: |
            dl-${{ matrix.platform }}-
            dl-
      - name: Restore Cache of .ccache/
        uses: actions/cache@v4
        with:
          path: .ccache/
          key: ccache-${{ matrix.platform }}-${{ hashFiles('.git/modules/buildroot/HEAD', 'package/*/*.hash') }}
          restore-keys: |
            ccache-${{ matrix.platform }}-
            ccache-
      - name: Configure & Build
        run: |
          make ${{ inputs.app }}_${{ matrix.platform }}_defconfig
          VER=${{ inputs.ver }}
          [[ "${VER}" =~ ^v.* ]] && sed -i "s/BR2_TARGET_ROOTFS_OCI_TAG.*/BR2_TARGET_ROOTFS_OCI_TAG=\"${VER}\"/" output/.config
          make
      - name: Prepare Artifact
        run: |
          cd output
          cp ../COPYING images/
          mv images ${{ steps.vars.outputs.dir }}
          ln -s ${{ steps.vars.outputs.dir }} images
          tar chfz ${{ steps.vars.outputs.tgz }} ${{ steps.vars.outputs.dir }}
      - uses: actions/upload-artifact@v4
        with:
          path: output/${{ steps.vars.outputs.tgz }}
          name: artifact-${{ inputs.app }}-${{ matrix.platform }}

  push:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: artifact-*
          merge-multiple: true
      - name: Artifact Variables
        id: vars
        run: |
          VER=${{ inputs.ver }}
          SFX=""
          if [[ "${VER}" =~ ^v.* ]]; then
            TAG=${VER#?}
            SFX="-$VER"
          else
            VER=edge
            TAG=$VER
          fi
          echo "ver=$VER" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "sfx=$SFX" >> $GITHUB_OUTPUT
      - name: Prepare Aritfacts
        run: |
          SFX=${{ steps.vars.outputs.sfx }}
          for file in *.tar.gz; do
              fn=$(basename ${file} .tar.gz)
              name=${fn%-*}
              arch=${fn##*-}
              echo "Found: $name arch: $arch"
              tar xf ${file}
              rm -f  ${file}
              mv ${fn}/rootfs-oci ${name}-oci-${arch}${SFX}
              mv ${fn}/COPYING ${name}-oci-${arch}${SFX}/
              rm -rf -- ${name}-oci-${arch}${SFX}/.[!.]*
              tar cfz ${name}-oci-${arch}${SFX}.tar.gz ${name}-oci-${arch}${SFX}
          done
          ls -la *-oci*${SFX}/
          for file in *.tar.gz; do
              sha256sum $file > $file.sha256
          done
          ls -l *.tar.gz*

      - name: Log in to registry
        run: |
          echo "${{ secrets.token }}" | buildah login -u ${{ github.actor }} --password-stdin ghcr.io
      - name: Push image(s)
        run: |
          set -x
          IMG=${{ inputs.app }}
          TAG=${{ steps.vars.outputs.tag }}
          SFX=${{ steps.vars.outputs.sfx }}
          URL=ghcr.io/${{ github.repository_owner }}/${IMG}
          buildah manifest create ${IMG}
          buildah manifest add ${IMG} oci:${IMG}-oci-amd64${SFX}
          buildah manifest add ${IMG} oci:${IMG}-oci-arm64${SFX}
          buildah manifest push --all -f oci ${IMG} docker://${URL}:${TAG}
      - uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          omitName: true
          omitBody: true
          omitBodyDuringUpdate: true
          prerelease: true
          tag: ${{ steps.vars.outputs.ver }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: "*.tar.gz*"
      - name: Summary
        run: |
          cat <<EOF >> $GITHUB_STEP_SUMMARY
          # Build of ${{ inputs.app }}, version ${{ steps.vars.outputs.ver }}, Complete! :rocket:
          
          For the public download links of these build artifacts, please see:
           <https://github.com/kernelkit/curiOS/releases/tag/${{ steps.vars.outputs.ver }}>
          EOF
